<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Optimism Vault Interface</title>
  <script src="https://cdn.jsdelivr.net/npm/web3@1.10.0/dist/web3.min.js"></script>
  <style>
    body { font-family: sans-serif; max-width: 600px; margin: auto; padding: 20px; }
    button { margin: 5px; padding: 10px 20px; }
    input { margin: 5px 0; width: 100%; padding: 8px; }
    .section { margin-bottom: 30px; }
  </style>
</head>
<body>

  <h1>Optimism Vault Interface</h1>

  <div class="section">
    <button onclick="connectWallet()">üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å MetaMask</button>
    <p>–í–∞—à –∞–¥—Ä–µ—Å: <span id="userAddress">‚Äî</span></p>
  </div>

  <div class="section">
    <p><strong>–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:</strong> <span id="contractAddress">‚Äî</span></p>
    <p><strong>–í–ª–∞–¥–µ–ª–µ—Ü:</strong> <span id="ownerAddress">‚Äî</span></p>
    <p><strong>–ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:</strong> <span id="vaultBalance">‚Äî</span> ETH</p>
    <button onclick="getBalance()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å</button>
  </div>

  <div class="section">
    <h3>üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å ETH –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç</h3>
    <input id="depositAmount" placeholder="–°—É–º–º–∞ –≤ ETH" />
    <button onclick="deposit()">–î–µ–ø–æ–∑–∏—Ç</button>
  </div>

  <div class="section">
    <h3>üì• –í—ã–≤–æ–¥ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)</h3>
    <input id="withdrawTo" placeholder="–ö—É–¥–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ETH (–∞–¥—Ä–µ—Å)" />
    <input id="withdrawAmount" placeholder="–°—É–º–º–∞ –≤ ETH" />
    <button onclick="withdraw()">–í—ã–≤–æ–¥</button>
  </div>

  <script>
    const contractABI = [
      { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
      { "anonymous": false, "inputs": [ { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" } ], "name": "Deposit", "type": "event" },
      { "anonymous": false, "inputs": [ { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" } ], "name": "Withdrawal", "type": "event" },
      { "inputs": [], "name": "owner", "outputs": [ { "internalType": "address", "name": "", "type": "address" } ], "stateMutability": "view", "type": "function" },
      { "inputs": [ { "internalType": "address payable", "name": "_to", "type": "address" }, { "internalType": "uint256", "name": "_amount", "type": "uint256" } ], "name": "withdraw", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
      { "inputs": [], "name": "getBalance", "outputs": [ { "internalType": "uint256", "name": "", "type": "uint256" } ], "stateMutability": "view", "type": "function" },
      { "inputs": [ { "internalType": "address", "name": "newOwner", "type": "address" } ], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
    ];

    // ‚¨áÔ∏è –£–∫–∞–∂–∏ –∑–¥–µ—Å—å –∞–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ Optimism
    const contractAddress = "0x1234567890abcdef1234567890abcdef12345678";  // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –∞–¥—Ä–µ—Å

    let web3;
    let contract;
    let userAccount;

    async function connectWallet() {
      if (window.ethereum) {
        web3 = new Web3(window.ethereum);
        await window.ethereum.enable();
        const accounts = await web3.eth.getAccounts();
        userAccount = accounts[0];
        document.getElementById('userAddress').innerText = userAccount;
        contract = new web3.eth.Contract(contractABI, contractAddress);
        document.getElementById('contractAddress').innerText = contractAddress;
        getOwner();
        getBalance();
      } else {
        alert("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask!");
      }
    }

    async function getOwner() {
      const owner = await contract.methods.owner().call();
      document.getElementById('ownerAddress').innerText = owner;
    }

    async function getBalance() {
      const balance = await contract.methods.getBalance().call();
      document.getElementById('vaultBalance').innerText = web3.utils.fromWei(balance, 'ether');
    }
async function deposit() {
      const amount = document.getElementById('depositAmount').value;
      if (!amount) return alert("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É");
      await web3.eth.sendTransaction({
        from: userAccount,
        to: contractAddress,
        value: web3.utils.toWei(amount, 'ether')
      });
      getBalance();
    }

    async function withdraw() {
      const to = document.getElementById('withdrawTo').value;
      const amount = document.getElementById('withdrawAmount').value;
      if (!to || !amount) return alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è");
      try {
        await contract.methods.withdraw(to, web3.utils.toWei(amount, 'ether')).send({ from: userAccount });
        getBalance();
      } catch (err) {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ: " + err.message);
      }
    }
  </script>

</body>
</html>